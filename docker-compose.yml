services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development  # Use the development stage for local development
      args: # Add build arguments
        USER_ID: 501 # This will still be used for file ownership in the build
        GROUP_ID: 20 # This will still be used for file ownership in the build
        # DOCKER_GID: <We don't need this anymore>
    # user: "501:20" # Removed: Run as default user (root)
    ports:
      - "3000:3000"  # Frontend
      - "8000:8000"  # Backend API
    volumes:
      # Use more specific bind mounts for development
      - ./backend:/app/backend  # Bind mount for backend development
      - ./frontend:/app/frontend  # Bind mount for frontend development
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket for Docker-in-Docker (MCP servers)
      - ./data/db:/app/backend/db  # Persist database files
      - ./data/indexes:/app/backend/indexes  # Persist index files
      # Exclude node_modules and build artifacts from host machine
      #- /app/frontend/node_modules
      #- /app/frontend/.next
      #- /app/backend/__pycache__
    # group_add: # Removed
    #   - "20" # Use the GID directly, as 'staff' might not exist initially in the container
    environment:
      - NODE_ENV=development
      - PYTHONPATH=/app
      - FASTAPI_ENV=development
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ALGORITHM=HS256
      - DISABLE_SQL_LOGS=true
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - FIRST_ADMIN_EMAIL=${FIRST_ADMIN_EMAIL:-admin@example.com}
      - FIRST_ADMIN_PASSWORD=${FIRST_ADMIN_PASSWORD:-change-this-password}
      # LLM Service environment variables
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://localhost:11434}
      - LM_STUDIO_BASE_URL=${LM_STUDIO_BASE_URL:-http://localhost:8000}
      # Memory management
      - PYTHONMALLOC=debug
      - PYTHONWARNINGS=always
      # MCP configuration
      - MCP_NETWORK=mcp-network
      - MCP_DATA_DIR=/var/lib/doogie-chat/mcp
      - MCP_ENABLE_DOCKER=true
    restart: unless-stopped
    entrypoint: ["/app/entrypoint.sh"]
    # Add memory limits to prevent OOM issues
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    # Add healthcheck
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
